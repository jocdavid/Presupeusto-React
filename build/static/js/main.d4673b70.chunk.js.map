{"version":3,"sources":["components/Error.jsx","components/Pregunta.jsx","components/Formulario.jsx","components/Gasto.jsx","components/Listado.jsx","helpers.js","components/ControlPresupuesto.jsx","App.js","serviceWorker.js","index.js"],"names":["Error","mensaje","className","Pregunta","guardarPresupuesto","guardarRestante","actualizarPregunta","useState","cantidad","guardarCantidad","error","guardarError","onSubmit","e","preventDefault","isNaN","type","name","placeholder","onChange","parseInt","target","value","Formulario","guardarGasto","guardarCrearGasto","nombre","guardarNombre","trim","gasto","id","shortid","generate","htmlFor","Gasto","Listado","gastos","map","key","revisarPresupuesto","presupuesto","restante","ControlPresupuesto","App","mostrarPregunta","guardarGastos","crearGasto","useEffect","presupuestoRestante","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"iMAQeA,EAND,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACZ,OACI,uBAAGC,UAAW,4BAA4BD,IC2EnCE,EA3EE,SAAC,GAA+D,IAA9DC,EAA6D,EAA7DA,mBAAoBC,EAAyC,EAAzCA,gBAAiBC,EAAwB,EAAxBA,mBAAwB,EAIxCC,mBAAS,GAJ+B,mBAIrEC,EAJqE,KAI3DC,EAJ2D,OAK9CF,oBAAU,GALoC,mBAKrEG,EALqE,KAK9DC,EAL8D,KAoC5E,OACI,kBAAC,WAAD,KAEI,qDAMA,0BACAC,SA/BmB,SAAAC,GACvBA,EAAEC,iBAIEN,GAAY,GAAKO,MAAOP,GACxBG,GAAa,IAKjBA,GAAa,GACbP,EAAmBI,GACnBH,EAAgBG,GAChBF,GAAmB,MAmBVI,EAED,kBAAC,EAAD,CACIT,QAAU,oCACT,KAEL,2BACAe,KAAK,SACLC,KAAK,cACLC,YAAY,wBACZhB,UAAU,eACViB,SAlDe,SAACN,GACxBJ,EAAgBW,SAASP,EAAEQ,OAAOC,WAoD1B,2BACAN,KAAK,SACLM,MAAM,sBACNpB,UAAU,mC,gBCmBXqB,EAnFI,SAAC,GAAuC,IAAtCC,EAAqC,EAArCA,aAAcC,EAAuB,EAAvBA,kBAAuB,EAEtBlB,mBAAU,IAFY,mBAE/CmB,EAF+C,KAEvCC,EAFuC,OAGlBpB,mBAAU,IAHQ,mBAG/CC,EAH+C,KAGrCC,EAHqC,OAIxBF,oBAAU,GAJc,mBAI/CG,EAJ+C,KAIxCC,EAJwC,KAuCtD,OACI,6BAEI,sDAECD,EAAQ,kBAAC,EAAD,CAAOT,QAAQ,kCAAoC,KAE5D,0BACAW,SAvCa,SAACC,GAIlB,GAHAA,EAAEC,iBAGEN,EAAW,GAAKO,MAAMP,IAA+B,KAAlBkB,EAAOE,OAC3CjB,GAAa,OADhB,CAKAA,GAAc,GACdc,GAAmB,GAInB,IAAMI,EAAQ,CACVH,OAASA,EACTlB,SAAWA,EACXsB,GAAKC,IAAQC,YAKjBR,EAAcK,MAoBN,2BAAOI,QAAQ,SAAf,gBACA,2BAAOjB,KAAK,OACRC,KAAK,QACLf,UAAW,eACXgB,YAAc,iBACdI,MAASI,EACTP,SAAW,SAAAN,GAAC,OAAIc,EAAcd,EAAEQ,OAAOC,UAG3C,2BAAOW,QAAQ,YAAf,mBACA,2BACIjB,KAAK,SACLC,KAAK,WACLf,UAAW,eACXoB,MAAQd,EACRW,SAAY,SAAAN,GAAC,OAAIJ,EAAgBW,SAASP,EAAEQ,OAAOC,SACnDJ,YAAc,4BAGlB,2BACIF,KAAK,SACLM,MAAM,gBACNpB,UAAU,mCC5DfgC,EAfD,SAAC,GAAa,IAAZL,EAAW,EAAXA,MACZ,OACI,wBAAI3B,UAAY,UACZ,2BACK2B,EAAMH,OACP,0BAAMxB,UAAU,SAAhB,KACO2B,EAAMrB,aCUd2B,EAfC,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACd,OACI,yBAAKlC,UAAU,qBACX,8CACCkC,EAAOC,KAAK,SAAAR,GAAK,OAEd,kBAAC,EAAD,CACIS,IAAOT,EAAMC,GACbD,MAASA,SCXhBU,EAAqB,SAACC,EAAaC,GAW5C,OARMD,EAAc,EAAKC,EACb,qBACAD,EAAa,EAAMC,EACnB,sBAEA,uBCaDC,EAlBY,SAAC,GAA6B,IAA5BF,EAA2B,EAA3BA,YAAaC,EAAc,EAAdA,SACtC,OACI,iCAEI,yBAAKvC,UAAU,uBAAf,iBAEmBsC,GAGnB,yBAAKtC,UAAYqC,EAAmBC,EAAaC,IAAjD,gBACkBA,KCoFfE,MAzFf,WAAe,MAI6BpC,mBAAS,GAJtC,mBAINiC,EAJM,KAIOpC,EAJP,OAKuBG,mBAAS,GALhC,mBAKNkC,EALM,KAKIpC,EALJ,OAMiCE,oBAAU,GAN3C,mBAMNqC,EANM,KAMWtC,EANX,OAOmBC,mBAAU,IAP7B,mBAON6B,EAPM,KAOES,EAPF,OAQiBtC,mBAAU,IAR3B,mBAQNsB,EARM,KAQCL,EARD,OAS2BjB,oBAAU,GATrC,mBASNuC,EATM,KASMrB,EATN,KAsCb,OAzBAsB,qBAAW,WACLD,GAGFD,EAAc,GAAD,mBACRT,GADQ,CAEXP,KAKJ,IAAMmB,EAAsBP,EAAUZ,EAAMrB,SAE5CH,EAAiB2C,GAEjBvB,GAAkB,KAGjB,CAACI,EAAOiB,EAAYV,EAAQK,IAS3B,yBAAKvC,UAAU,aACb,gCAEE,6CAEA,yBAAKA,UAAU,iCAEZ0C,EAEA,kBAAC,EAAD,CACCxC,mBAAsBA,EACtBC,gBAAmBA,EACnBC,mBAAsBA,IAGvB,yBAAKJ,UAAU,OAEhB,yBAAKA,UAAU,mBACb,kBAAC,EAAD,CACEsB,aAAgBA,EAChBC,kBAAqBA,KAIzB,yBAAKvB,UAAU,mBACb,kBAAC,EAAD,CACEkC,OAAUA,IAEZ,kBAAC,EAAD,CACEI,YAAeA,EACfC,SAAYA,UClERQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAvD,GACLwD,QAAQxD,MAAMA,EAAMyD,a","file":"static/js/main.d4673b70.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Error = ({mensaje}) => {\r\n    return ( \r\n        <p className =\"alert alert-danger error\">{mensaje}</p>\r\n     );\r\n}\r\n \r\nexport default Error;","import React, {Fragment, useState} from 'react'\r\nimport Error from './Error'\r\n\r\n\r\nconst Pregunta = ({guardarPresupuesto, guardarRestante, actualizarPregunta}) => {\r\n\r\n    //definir state de cantidad\r\n\r\n    const [cantidad, guardarCantidad] = useState(0); //el presupuesto inicia en 0\r\n    const [error, guardarError] = useState (false) // state de validacion\r\n\r\n\r\n    //funcion leer presupuesto desde el INPUT\r\n    const definirPresupuesto = (e)=>{\r\n        guardarCantidad(parseInt(e.target.value)) //se le agrega parseInt para convertir el input en numeros ya que por defecto se ingresa como string(texto)\r\n    }\r\n\r\n    //Submit para definir presupuesto\r\n\r\n    const agregarPresupuesto = e =>{\r\n        e.preventDefault(); //apra que no lo envie ni recargue la pag.\r\n\r\n        //validar\r\n\r\n        if (cantidad <= 0 || isNaN (cantidad)){\r\n            guardarError(true); //cambia el estado de error a true\r\n            return;\r\n        };\r\n\r\n        //si se pasa la validacion\r\n        guardarError(false);\r\n        guardarPresupuesto(cantidad);\r\n        guardarRestante(cantidad);\r\n        actualizarPregunta(false);\r\n\r\n    }\r\n        \r\n\r\n\r\n\r\n    return ( \r\n        <Fragment>\r\n\r\n            <h2>Coloca tu Presupuesto</h2>\r\n\r\n            \r\n            \r\n            \r\n\r\n            <form\r\n            onSubmit={agregarPresupuesto}\r\n            >\r\n                {error ? \r\n                \r\n                <Error \r\n                    mensaje = \"Por favor Coloca tu presupuesto\"\r\n                /> : null}\r\n                \r\n                <input \r\n                type=\"number\" \r\n                name=\"presupuesto\"\r\n                placeholder=\"Coloca tu presupuesto\"\r\n                className=\"u-full-width\"\r\n                onChange = {definirPresupuesto}\r\n                />\r\n\r\n                <input \r\n                type=\"submit\"\r\n                value=\"Definir Presupuesto\"\r\n                className=\"button-primary u-full-width\"\r\n                />\r\n\r\n\r\n            </form>\r\n\r\n        </Fragment>\r\n    );\r\n}\r\n \r\nexport default Pregunta;","import React, {useState} from 'react';\r\nimport Error from './Error'\r\nimport shortid from 'shortid'\r\n\r\n\r\nconst Formulario = ({guardarGasto, guardarCrearGasto}) => {\r\n\r\n    const [nombre, guardarNombre] = useState ('');\r\n    const [cantidad, guardarCantidad] = useState ('')\r\n    const [error, guardarError] = useState (false)\r\n\r\n\r\n    //acciones al enviar el formulario\r\n    const agregarGasto = (e)=>{\r\n        e.preventDefault();\r\n        \r\n        //validar\r\n        if (cantidad < 1 || isNaN(cantidad) || nombre.trim() === ''){\r\n           guardarError(true);\r\n           return;\r\n        } \r\n        \r\n        guardarError (false);\r\n        guardarCrearGasto (true);\r\n\r\n        //construir el gasto\r\n\r\n        const gasto = {\r\n            nombre : nombre ,\r\n            cantidad : cantidad,\r\n            id : shortid.generate()\r\n        }\r\n\r\n        //pasar el gasto al componente principal\r\n\r\n        guardarGasto (gasto);\r\n\r\n        //resetear el form\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    return ( \r\n        <div>\r\n\r\n            <h2>Agrega tus Gastos Aqui</h2>\r\n\r\n            {error ? <Error mensaje=\"Ambos campos son obligatorios\"/> : null}\r\n\r\n            <form\r\n            onSubmit = {agregarGasto}\r\n            >\r\n\r\n                <label htmlFor=\"gasto\">Nombre Gasto</label>\r\n                <input type=\"text\"\r\n                    name=\"gasto\"\r\n                    className= \"u-full-width\"\r\n                    placeholder = \"Ej: Transporte\"\r\n                    value = {nombre}\r\n                    onChange= {e => guardarNombre(e.target.value)}\r\n                />\r\n\r\n                <label htmlFor=\"cantidad\"> Cantidad Gasto</label>\r\n                <input \r\n                    type=\"number\" \r\n                    name=\"cantidad\"\r\n                    className= \"u-full-width\"\r\n                    value= {cantidad}\r\n                    onChange = {e => guardarCantidad(parseInt(e.target.value))}\r\n                    placeholder = \"Ingrese valor del gasto\"\r\n                />\r\n\r\n                <input\r\n                    type=\"submit\"\r\n                    value=\"Agregar Gasto\"\r\n                    className=\"button-primary u-full-width\"\r\n                    \r\n                />\r\n\r\n            </form>\r\n            \r\n\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Formulario; ","import React from 'react'\r\n\r\nconst Gasto = ({gasto}) => {\r\n    return ( \r\n        <li className = \"gastos\">\r\n            <p>\r\n                {gasto.nombre}\r\n                <span className=\"gasto\">\r\n                    $ {gasto.cantidad}\r\n                </span>\r\n                \r\n            </p>\r\n\r\n        </li>\r\n     );\r\n}\r\n \r\nexport default Gasto;","import React from 'react';\r\nimport Gasto from './Gasto';\r\n\r\nconst Listado = ({gastos}) => {\r\n    return ( \r\n        <div className=\"gastos-realizados\">\r\n            <h2>Listado Gastos</h2>\r\n            {gastos.map (gasto => \r\n                (\r\n                <Gasto\r\n                    key = {gasto.id}\r\n                    gasto = {gasto}\r\n                />)\r\n            )  }\r\n        </div>\r\n     );\r\n};\r\n \r\nexport default Listado;","export const revisarPresupuesto = (presupuesto, restante) => {\r\n    let clase;\r\n\r\n    if ( (presupuesto / 4) > restante ){\r\n        clase = 'alert alert-danger';\r\n    } else if ((presupuesto /2 ) > restante){\r\n        clase = 'alert alert-warning';\r\n    } else {\r\n        clase = 'alert alert-success';\r\n    }\r\n\r\n    return clase\r\n}","import React from 'react';\r\nimport {revisarPresupuesto} from '../helpers'\r\n\r\nconst ControlPresupuesto = ({presupuesto, restante}) => {\r\n    return ( \r\n        <section>\r\n            \r\n            <div className=\"alert alert-primary\">\r\n\r\n                Presupuesto: ${presupuesto}\r\n            </div>\r\n\r\n            <div className ={revisarPresupuesto(presupuesto, restante)}>\r\n                Restante:  $ {restante}\r\n            </div>\r\n\r\n        </section>\r\n\r\n     );\r\n}\r\n \r\nexport default ControlPresupuesto;","import React, {useState, useEffect} from 'react';\nimport Pregunta from './components/Pregunta';\nimport Formulario from './components/Formulario';\nimport Listado from './components/Listado';\nimport ControlPresupuesto from './components/ControlPresupuesto';\n\n\n\nfunction App() {\n\n  //definir el state\n\n  const [presupuesto, guardarPresupuesto] = useState(0);\n  const [restante, guardarRestante] = useState(0);\n  const [mostrarPregunta, actualizarPregunta] = useState (true) // state para render condicional del componente pregunta\n  const [gastos, guardarGastos] = useState ([])\n  const [gasto, guardarGasto] = useState ({})\n  const [crearGasto, guardarCrearGasto] = useState (false) //estado qeu recibe si se ha ingresado un gasto nuevo\n\n  //useEffect que verifica si se creo un gasto nuevo y muestra el restante\n  \n  useEffect (()=>{\n    if (crearGasto){\n\n      //agrega nuevo presupuesto\n      guardarGastos([\n        ...gastos,\n        gasto\n      ])\n    }\n\n    //resta del presupeusto actual\n    const presupuestoRestante = restante -gasto.cantidad;\n\n    guardarRestante (presupuestoRestante)\n\n    guardarCrearGasto(false)\n    \n    \n  }, [gasto, crearGasto, gastos, restante]);\n\n  \n\n  //funcion agregar un nuevo gasto\n\n\n  return (\n\n      <div className=\"container\">\n        <header>\n\n          <h1>Gasto Semanal</h1>\n\n          <div className=\"contenido-principal contenido\">\n\n            {mostrarPregunta ?\n\n            (<Pregunta\n              guardarPresupuesto = {guardarPresupuesto}\n              guardarRestante = {guardarRestante}\n              actualizarPregunta = {actualizarPregunta}\n            />) :\n\n            (<div className=\"row\">\n\n            <div className=\"one-half column\">\n              <Formulario\n                guardarGasto = {guardarGasto}\n                guardarCrearGasto = {guardarCrearGasto}\n              />\n            </div>\n\n            <div className=\"one-half column\">\n              <Listado\n                gastos = {gastos}\n              />\n              <ControlPresupuesto\n                presupuesto = {presupuesto}\n                restante = {restante}\n              \n              />\n            </div>\n\n          </div>)}\n\n\n            \n          </div>\n\n         \n    \n        </header>\n      </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}